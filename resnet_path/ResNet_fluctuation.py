# python ResNet_fluctuation.py  2>&1 | tee ResNet_fluctuation.log
import numpy as np
import matplotlib.pyplot as plt

import chainer
from chainer import Function, gradient_check, report, training, utils, Variable
from chainer import datasets, iterators, optimizers, serializers
from chainer import Link, Chain, ChainList
import chainer.functions as F
import chainer.links as L
from chainer.training import extensions
from chainer.dataset import concat_examples

import os
import random
import copy
import datetime
import code
import sys
import shutil
import pickle
from PIL import Image

from chainer.backends import cuda

from search_grad import *
from resnet import *


############################################################################
out_dir ='ResNet_Fluctuation_'
out_dir += datetime.datetime.today().strftime('%y%m%d%H%M%S')
os.makedirs(out_dir, exist_ok=True)
############################################################################


############################################################################
"""
############################################################################
model_name = 'ResNet50'
test_bat = 40
############################################################################

############################################################################
model_name = 'ResNet101'
test_bat = 20
############################################################################
"""
############################################################################
model_name = 'ResNet152'
test_bat = 10
############################################################################

############################################################################


############################################################################
## parameter for divided interval
############################################################################
max_div = 1000  ## max divided number
############################################################################


############################################################################
## number of output dimensions for sampling
############################################################################
num_out = 1000
############################################################################


############################################################################
"""
############################################################################
a_name = 'n02066245/n02066245_9954.JPEG'
b_name = 'n02066245/n02066245_9985.JPEG'
############################################################################

############################################################################
a_name = 'n02096294/n02096294_9959.JPEG'
b_name = 'n02096294/n02096294_9982.JPEG'
############################################################################

############################################################################
a_name = 'n02100735/n02100735_9997.JPEG'

b_name = 'n02100735/n02100735_9998.JPEG'
############################################################################

############################################################################
a_name = 'n02102040/n02102040_8463.JPEG'
b_name = 'n02102040/n02102040_8474.JPEG'
############################################################################

############################################################################
a_name = 'n02110185/n02110185_9998.JPEG'
b_name = 'n02110185/n02110185_9999.JPEG'
############################################################################

############################################################################
a_name = 'n02119789/n02119789_9987.JPEG'
b_name = 'n02119789/n02119789_9996.JPEG'
############################################################################

############################################################################
a_name = 'n02123394/n02123394_9878.JPEG'
b_name = 'n02123394/n02123394_9939.JPEG'
############################################################################

############################################################################
a_name = 'n02124075/n02124075_9985.JPEG'
b_name = 'n02124075/n02124075_9999.JPEG'
############################################################################

############################################################################
a_name = 'n02417914/n02417914_9961.JPEG'
b_name = 'n02417914/n02417914_9974.JPEG'
############################################################################

############################################################################
a_name = 'n02509815/n02509815_9962.JPEG'

b_name = 'n02509815/n02509815_9988.JPEG'
############################################################################

############################################################################
a_name = 'n03000134/n03000134_5016.JPEG'

b_name = 'n03000134/n03000134_5046.JPEG'
############################################################################

############################################################################
a_name = 'n04004767/n04004767_5000.JPEG'
b_name = 'n04004767/n04004767_5018.JPEG'
############################################################################
"""
############################################################################
a_name = 'n06359193/n06359193_50399.JPEG'
"""
b_name = 'n06359193/n06359193_50469.JPEG'
############################################################################

############################################################################
a_name = 'n07248320/n07248320_50032.JPEG'
b_name = 'n07248320/n07248320_20005.JPEG'
############################################################################

############################################################################
a_name = 'n09193705/n09193705_20148.JPEG'
"""
b_name = 'n09193705/n09193705_50014.JPEG'
############################################################################

############################################################################


############################################################################
img_a_name = 'data_imagenet/' + a_name
img_b_name = 'data_imagenet/' + b_name
############################################################################


############################################################################
gpu_id = 0
############################################################################
if gpu_id is not None:
    if gpu_id >= 0:
        cuda.get_device_from_id(gpu_id).use()
        xp = cuda.cupy
        cpu = cuda.to_cpu
    else:
        xp = np
        cpu = lambda value: value
    # end if
else:
    xp = np
    cpu = lambda value: value
# end if
############################################################################


############################################################################
def get_model(model_name):
    if model_name == 'ResNet50':
        model = ResNet50Layers(num_out)
    elif model_name == 'ResNet101':
        model = ResNet101Layers(num_out)
    elif model_name == 'ResNet152':
        model = ResNet152Layers(num_out)
    # end if
    return model
############################################################################


############################################################################
def calc_output(model, img):
    ########################################################################
    x = chainer.links.model.vision.resnet.prepare(img)
    x = x[np.newaxis]
    x = chainer.Variable(xp.asarray(x))
    with chainer.using_config('train', False):
         ro_data = model.get_act(x)
    # end with
    ########################################################################
    num_acts = 0
    for val in ro_data:
        num_acts += (val[0]).size
    # end for
    ########################################################################
    print('num_acts =', num_acts)
    return num_acts
############################################################################


############################################################################
def get_div(num_acts):
    ########################################################################
    if (num_acts > max_div):
        ####################################################################
        x_div = np.linspace(0.0, 1.0, max_div, dtype=np.float)
        ####################################################################
    else:
        ####################################################################
        x_div = np.linspace(0.0, 1.0, num_acts, dtype=np.float)
        ####################################################################
    # end if
    ########################################################################
    return x_div
############################################################################


############################################################################
def calc_fluctuation(model, img_a, img_b):
    ########################################################################
    if gpu_id is not None:
        if gpu_id >= 0:
            model.to_gpu()
    ########################################################################
    num_acts = calc_output(model, img_a)
    ########################################################################
    x_div = get_div(num_acts)
    ########################################################################
    print('calc. network behavior')
    data_arr, grad_arr,  hess_list, switch, g_sig_list = bf_behavior(
        model, img_a, img_b, x_div, num_out, test_bat)
    ########################################################################
    ## hess sigma (with amount)
    h_sigma_arr = np.array(hess_list)
    h_sigma = h_sigma_arr.mean()
    ########################################################################
    ## hess fluc
    h_fluc_arr = h_sigma_arr * np.sqrt(switch) / 2
    h_fluc = h_fluc_arr.mean()
    ########################################################################
    g_sigma_arr = np.array(g_sig_list)
    g_sigma = g_sigma_arr.std()
    ########################################################################
    ## grad fluc
    g_fluc_arr = g_sigma_arr * np.sqrt(switch) / 2
    g_fluc = g_fluc_arr.std()
    ########################################################################
    print('=============================================================')
    g_val = 'switch:{:.1f}, g_sigma:{:.12f}, g_fluc:{:.9f}'.format(
        switch, g_sigma, g_fluc)
    print(g_val)
    h_val = 'switch:{:.1f}, h_sigma:{:.12f}, h_fluc:{:.9f}'.format(
        switch, h_sigma, h_fluc)
    print(h_val)
    print('=============================================================\n')
    ########################################################################
    plot_sample(data_arr, grad_arr, out_dir, 'data', a_name, b_name,
                switch, g_sigma, g_fluc, h_sigma, h_fluc, 0.5)
    ########################################################################
    if gpu_id is not None:
        if gpu_id >= 0:
            model.to_cpu()
    ########################################################################
############################################################################


#############################################################################
def plot_sample(data_arr, grad_arr, out_dir, data_name, a_name, b_name,
                switch, g_sigma, g_fluc, h_sigma, h_fluc, lw=0.2):
    #########################################################################
    # setup data
    #########################################################################
    node_arr = np.linspace(0.0, 1.0, data_arr.shape[0], dtype=np.float)
    #########################################################################
    data = {}
    for p_node, val_data in zip(node_arr, data_arr):
        for i, sub_val in enumerate(val_data):
            if not i in data:
                data[i] = [[], []]
            # end if
            data[i][0].append(p_node)
            data[i][1].append(sub_val)
        # end for
    # end for
    #########################################################################
    filename = '{0}/sample_path_data.png'.format(out_dir)
    plt.cla()
    fig = plt.figure(figsize=(5, 2))
    #########################################################################
    ax = fig.add_subplot(111)
    ys = []
    for dim, (t, y) in data.items():
        ys.extend(y)
        # ax.plot(t, y, alpha=1.0, linewidth = 0.1)
        ax.plot(t, y, linewidth = 0.5)
    # end for
    #########################################################################
    # ax.set_title("{}".format(model_desc),fontsize=7)
    plt.tight_layout()
    plt.savefig(filename)
    ax.clear()
    fig.clf()
    plt.close(fig)
    #########################################################################


    #########################################################################
    grad = {}
    for p_node, val_data in zip(node_arr, grad_arr):
        for i, sub_val in enumerate(val_data):
            if not i in grad:
                grad[i] = [[], []]
            # end if
            grad[i][0].append(p_node)
            grad[i][1].append(sub_val)
        # end for
    # end for
    #########################################################################

    #########################################################################
    model_desc = data_name + ' sample path\n'
    model_desc += 'X0: {},    X1: {}\n'.format(a_name, b_name)
    model_desc += 'switch:{:.1f},  g_sigma:{},  g_fluc:{:.7f}\n'.format(
        switch, g_sigma, g_fluc)
    model_desc += 'switch:{:.1f},  h_sigma:{},  h_fluc:{:.7f}'.format(
        switch, h_sigma, h_fluc)
    #########################################################################
    print( model_desc )
    #########################################################################
    filename = '{0}/sample_path_grad.png'.format(out_dir)
    #########################################################################
    plt.cla()
    fig = plt.figure(figsize=(5, 2))
    #########################################################################
    ax = fig.add_subplot(111)
    ys = []
    for dim, (t, y) in grad.items():
        ys.extend(y)
        # ax.plot(t, y, alpha=1.0, linewidth = 0.1)
        ax.plot(t, y, linewidth = 0.4)
    # end for
    #########################################################################
    # ax.set_title("{}".format(model_desc),fontsize=7)
    plt.tight_layout()
    plt.savefig(filename)
    ax.clear()
    fig.clf()
    plt.close(fig)
    #########################################################################
#############################################################################


############################################################################
def save_files():
    ########################################################################
    my_file = os.path.basename(__file__)
    shutil.copy('./' + my_file, './{}/'.format(out_dir) + my_file)
    cg_file = 'search_grad.py'
    shutil.copy('./' + cg_file, './{}/'.format(out_dir) + cg_file)
    md_file = 'resnet.py'
    shutil.copy('./' + md_file, './{}/'.format(out_dir) + md_file)
    ########################################################################
############################################################################


############################################################################
def main():
    ########################################################################
    save_files()
    ########################################################################
    img_a = Image.open(img_a_name)
    img_b = Image.open(img_b_name)
    ########################################################################
    # plt.imshow(img_a)
    # plt.show()
    ########################################################################
    model = get_model(model_name)
    calc_fluctuation(model, img_a, img_b)
    
############################################################################


############################################################################
if __name__ == '__main__':
    main()
    # import pdb; pdb.set_trace()
 
